srange <- 0:2000*100
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
bev.holt <- function(s, alpha, k) {
r <- (alpha*s) / (1 + (s/k))
return(r)
}
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r)
}
source('srfun.r')
setwd('C:/Users/pfrater/Documents/classes/fish510/rCode/fish510.6')
source('srfun.r')
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r)
}
wa<-cond*la**beta/1000                    # Mean weight at age in kg
wa<-round(wa,2)
s50<-5                                    # Age at 50% selection
sa<-round(1/(1+exp(-1.1*(ages-s50))),2)   # Selection at age
p50<-5.5
pa<-round(1/(1+exp(-2*(ages-p50))),2)   # Proportion mature at age
## R exercises for fish510.6
setwd('C:/Users/pfrater/Documents/classes/fish510/rCode/fish510.6')
# using data on cod to calculate a stock recruitment curve
sr <- read.table('sr.dat', header=T, as.is=T, check.names=F)
r <- sr$R
s <- sr$S
plot(R~S, data=sr, xlim=c(0,max(sr$S)))
bev.holt <- function(s, alpha, k) {
r <- (alpha*s) / (1 + (s/k))
return(r)
}
sse.bev.holt <- function(vals) {
alpha <- vals[1]
k <- vals[2]
s <- sr$S
r.hat <- bev.holt(s, alpha, k);
r <- sr$R
sse <- sum((r - r.hat)^2)
return(sse)
}
nl.mod <- nls(R ~ bev.holt(S, alpha, k), data=sr, start=list(alpha=0.001, k=10))
curve(bev.holt(s=x, 10.28, 18.36), add=T, col='red')
r.hats <- bev.holt(s, alpha=10.28, k=18.36)
plot(sr$R ~ r.hats)
vals <- c(10.28, 18.36)
r.mins <- nlm(sse.bev.holt, p=c(10.28, 18.36))
plot(r~s, xlab='Spawning stock biomass', ylab='Number of recruits', xlim=c(0,max(s)))
curve(bev.holt(s=x, 10.28, 18.36), add=T, col='red')
curve(bev.holt(s=x, r.mins$estimate[1], r.mins$estimate[2]), add=T, col='blue')
# data requirements: data is needed to compute production and replacement curves
# can either use real data or simulate data
Linf<-160
k<-0.1
beta<-3
cond<-0.02
ages<-1:14
t0<-0
la<-Linf*(1-exp(-k*(ages-t0)))            # Mean length at age
la<-round(la,2)
selF1<-0
selF2<-0.25
selF3<-0.35
selF4<-1.1
wa<-cond*la**beta/1000                    # Mean weight at age in kg
wa<-round(wa,2)
s50<-5                                    # Age at 50% selection
sa<-round(1/(1+exp(-1.1*(ages-s50))),2)   # Selection at age
p50<-5.5
pa<-round(1/(1+exp(-2*(ages-p50))),2)   # Proportion mature at age
M<-0.2
par(mfrow=c(2,2))
plot(ages,la,type='l',lwd=3, xlab="Age (years)", ylab="Length (cm)", ylim=c(0,max(la)))
plot(ages,wa,type='l',lwd=3, xlab="Age (years)", ylab="Weight (kg)")
plot(ages,sa,type='l',lwd=3, xlab="Age (years)", ylab="Selection")
plot(ages,pa,type='l',lwd=3, xlab="Age (years)", ylab="Proportion mature")
source('srfun.r')
# parameters for a stock-recruit relationship
alpha <- 0.5
K <- 20000
# parameters can also be simulated by fixing the collapse fishing mortality (Fcrash) and compute the corresponding alpha
alpha <- 1/(srfun(selF4, M, sa, wa, pa))
K <- 20000
# then compute the production and replacement curves and look at effects of fishing mortality
srange <- 0:2000*100
rhat <- alpha*srange/(1+(srange/K))
plot(rhat~srange, type='l', xlab='S (000 t)', ylab='R (millions)')
sr1 <- srfun(selF1, M=M, sa=sa, wa=wa, pa=pa)
sr2 <- srfun(selF2, M=M, sa=sa, wa=wa, pa=pa)
sr3 <- srfun(selF3, M=M, sa=sa, wa=wa, pa=pa)
sr4 <- srfun(selF4, M=M, sa=sa, wa=wa, pa=pa)
lines(srange, srange/sr1)
lines(srange, srange/sr2)
lines(srange, srange/sr3)
lines(srange, srange/sr4)
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r)
}
head(pop)
length(pop)
tail(pop)
s
temp.s
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
pop
temp.s
s
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.3, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.5, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
lines(Srange,Srange/sr2)
Srange<-0:2000*100
Rhat<-alpha*Srange/(1+Srange/K)
plot(Srange,Rhat,type='l',xlab="S ('000 t)",ylab="R (millions)",ylim=c(0,10000))
sr2<-srfun(selF2,sa,M,wa,pa)
sr3<-srfun(selF3,sa,M,wa,pa)
#sr.crash<-srfun(Fcrash,sa,M,wa,pa)
#lines(Srange,Srange/sr.crash)
text(150000,6500,"Beverton-Holt curve")
text(150000,6000,expression(R=alpha*S/(1+S/K)))
text(70000,3000,"Replacement")
#text(15000,4500,"Slope for\n Fcrash is")
#text(15000,6000,expression(alpha))
S0<-10000
R0<-alpha*S0/(1+S0/K)
S1<-R0*sr2
R1<-alpha*S1/(1+S1/K)
S2<-R1*sr2
R2<-alpha*S2/(1+S2/K)
S3<-R2*sr2
R3<-alpha*S3/(1+S3/K)
S4<-R3*sr2
R4<-alpha*S4/(1+S4/K)
lines(c(S0,S0,S1,S1,S2,S2,S3,S3,S4),c(0,R0,R0,R1,R1,R2,R2,R3,R3))
lines(Srange,Srange/sr2)
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.2, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.7, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.8, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(0.9, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
srange <- 0:2000*100
alpha <- 0.5
K <- 20000
curve(bev.holt(x, alpha, K), 0, max(srange))
s <- 1000;
r <- 100;
pop <- 100;
temp.r <- 100;
temp.s <- s;
while (s < max(srange)) {
new.r <- bev.holt(s, alpha, K);
lines(x=c(s,s), y=c(temp.r, new.r));
sr <- srfun(1.5, M, sa, wa, pa)
s <- new.r*sr;
if (temp.s == s) break
lines(srange, srange/sr)
lines(x=c(temp.s, s), y=c(new.r, new.r));
temp.r <- new.r;
temp.s <- s;
pop <- c(pop, new.r);
}
source('yrfun.r')
alpha <- 1/srfun(selF4)
alpha <- 1/srfun(selF4, M, sa, wa, pa)
sr<-srfun(selF2,M,sa,wa,pa)
yr<-yrfun(selF2,M,sa,wa)
S<-K*(alpha*sr-1)
R<-alpha*S/(1+S/K)
Y<-yr*R
Y
alpha<-1/srfun(selF4) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 # Range for plotting
sr<-sapply(Frange,srfun) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun) # Compute yield per recruit for all F
Srange<-K*(alpha*sr-1) # Compute equilibrium SSB
Srange<-ifelse(Srange>0,Srange,0) # set to zero if negative
Rrange<-alpha*Srange/(1+Srange/K) # Compute equilibrium recruitment
Yrange<-yr*Rrange # Compute the equilibrium yield
par(mfrow=c(2,2)) #
plot(Frange,yr,type='l',lwd=3) # Plot yield per recruit vs F
plot(Frange,sr,type='l',lwd=3) # Plot biomass per recruit vs Fplot(Frange,Srange,type='l',lwd=3) # Plot equilibrium SSB
plot(Frange,Yrange,type='l',lwd=3) # Plot equilibrium yield
alpha<-1/srfun(selF4) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 # Range for plotting
sr<-sapply(Frange,srfun, selF2,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun, selF2,M,sa,wa,pa) # Compute yield per recruit for all F
Srange<-K*(alpha*sr-1) # Compute equilibrium SSB
Srange<-ifelse(Srange>0,Srange,0) # set to zero if negative
Rrange<-alpha*Srange/(1+Srange/K) # Compute equilibrium recruitment
Yrange<-yr*Rrange # Compute the equilibrium yield
par(mfrow=c(2,2)) #
plot(Frange,yr,type='l',lwd=3) # Plot yield per recruit vs F
plot(Frange,sr,type='l',lwd=3) # Plot biomass per recruit vs Fplot(Frange,Srange,type='l',lwd=3) # Plot equilibrium SSB
plot(Frange,Yrange,type='l',lwd=3) # Plot equilibrium yield
alpha<-1/srfun(selF4,M,sa,wa,pa) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 # Range for plotting
sr<-sapply(Frange,srfun, selF2,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun, selF2,M,sa,wa,pa) # Compute yield per recruit for all F
Srange<-K*(alpha*sr-1) # Compute equilibrium SSB
Srange<-ifelse(Srange>0,Srange,0) # set to zero if negative
Rrange<-alpha*Srange/(1+Srange/K) # Compute equilibrium recruitment
Yrange<-yr*Rrange # Compute the equilibrium yield
par(mfrow=c(2,2)) #
plot(Frange,yr,type='l',lwd=3) # Plot yield per recruit vs F
plot(Frange,sr,type='l',lwd=3) # Plot biomass per recruit vs Fplot(Frange,Srange,type='l',lwd=3) # Plot equilibrium SSB
plot(Frange,Yrange,type='l',lwd=3) # Plot equilibrium yield
alpha<-1/srfun(selF4,M,sa,wa,pa) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 #
sr<-sapply(Frange,srfun, selF2,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun, selF2,M,sa,wa,pa) # Compute yield per recruit for all F
?sapply
selF2
Frange
sr<-sapply(Frange,srfun) # Compute biomass per recruit for all F
sr<-sapply(Frange,srfun,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun,M,sa,wa,pa) # Compute yield per recruit for all F
sr<-sapply(Frange,srfun,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun,M,sa,wa,pa) # Compute yield per recruit for all F
sr
M
sa
wa
pa
yr<-sapply(Frange,yrfun,M,sa,wa) # Compute yield per recruit for all F
yr
alpha<-1/srfun(selF4,M,sa,wa,pa) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 # Range for plotting
sr<-sapply(Frange,srfun,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun,M,sa,wa) # Compute yield per recruit for all F
Srange<-K*(alpha*sr-1) # Compute equilibrium SSB
Srange<-ifelse(Srange>0,Srange,0) # set to zero if negative
Rrange<-alpha*Srange/(1+Srange/K) # Compute equilibrium recruitment
Yrange<-yr*Rrange # Compute the equilibrium yield
par(mfrow=c(2,2)) #
plot(Frange,yr,type='l',lwd=3) # Plot yield per recruit vs F
plot(Frange,sr,type='l',lwd=3) # Plot biomass per recruit vs Fplot(Frange,Srange,type='l',lwd=3) # Plot equilibrium SSB
plot(Frange,Yrange,type='l',lwd=3) # Plot equilibrium yield
alpha<-1/srfun(selF4,M,sa,wa,pa) # Make this Fcrash
K<-20000
Frange<-(0:(selF4*100))/100 # Range for plotting
sr<-sapply(Frange,srfun,M,sa,wa,pa) # Compute biomass per recruit for all F
yr<-sapply(Frange,yrfun,M,sa,wa) # Compute yield per recruit for all F
Srange<-K*(alpha*sr-1) # Compute equilibrium SSB
Srange<-ifelse(Srange>0,Srange,0) # set to zero if negative
Rrange<-alpha*Srange/(1+Srange/K) # Compute equilibrium recruitment
Yrange<-yr*Rrange # Compute the equilibrium yield
par(mfrow=c(2,2)) #
plot(Frange,yr,type='l',lwd=3) # Plot yield per recruit vs F
plot(Frange,sr,type='l',lwd=3) # Plot biomass per recruit vs F
plot(Frange,Srange,type='l',lwd=3) # Plot equilibrium SSB
plot(Frange,Yrange,type='l',lwd=3) # Plot equilibrium yield
